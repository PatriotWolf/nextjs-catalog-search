{"version":3,"file":"static/webpack/static/development/pages/index.js.442ab61cc4a342d700d3.hot-update.js","sources":["webpack:///./pages/index.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport React from 'react';\nimport fetch from 'isomorphic-unfetch';\nconst Div= styled.div`\noverflow: hidden;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center; /*centers items on the line (the x-axis by default)*/\n  align-items: center\n`;\nconst Input = styled.input`\n    width:100%;\n`\nconst Sugest = styled.div`\n    background:#fff;\n    display: flex;\n    \n    height: 50vh;\n    width:70vw;\n    border: 2px solid #000;\n    transition: 2s;\n    padding: 0;\n    margin: 0;\n    list-style: none;\n    \n    display: -webkit-box;\n    display: -moz-box;\n    display: -ms-flexbox;\n    display: -webkit-flex;\n    display: flex;\n    \n    -webkit-flex-flow: row wrap;\n    justify-content: space-around;\n`;\nconst Img = styled.img`\n    width :100%;\n    height: 30vh;\n`;\nconst Category = styled.div`\n    border-right: 1px solid #9e9e9e;\n    width:20%;\n    overflow: scroll;\n    word-wrap: break-word;\n`;\nconst TileContent = styled.div`\n    width:80%;\n    display: flex;\n    overflow: scroll;\n    flex-wrap: wrap;\n`;\nconst Card = styled.div`\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\n    transition: 0.3s;\n    flex-grow: 1;\n    width: 33%;\n`;\n\nconst Tag = styled.a`\n    background: #eee;\n    border-radius: 3px 0 0 3px;\n    color: #999;\n    display: inline-block;\n    height: 26px;\n    line-height: 26px;\n    padding: 0 20px 0 23px;\n    position: relative;\n    margin: 0 10px 10px 0;\n    text-decoration: none;\n`;\n\nclass IndexPage extends React.Component {\n    state={value:''};\n    static async getInitialProps () {\n        const data = await import(`../products.json`)\n        console.log(data);\n        let category = [];\n        let result = Object.keys(data).map(function(key) {\n            if(typeof category[data[key].category] === 'undefined') {\n               category.push(data[key].category)\n            }\n            return data[key];\n          }); \n        return { result }\n    }\n    handleChange = (event) => {\n        console.log(event.target.value)\n        this.setState({value: event.target.value});\n    }\n    handleClickTag = (category) => {\n        console.log(category)\n        this.setState({value: category});\n    }\n    render(){\n        const {result} = this.props; \n        const { value } = this.state;\n        let categories = [];\n        categories= result.filter(x=>{\n            let {category} = x;\n            \n            return category && categories.indexOf(category)\n            \n        });\n        \n        let tags = Object.keys(result).map(function(key) {\n            \n            return result[key].category;\n          }); \n        const uniqueNames = Array.from(new Set(tags));\n        console.log(uniqueNames)\n        console.log(category);\n        \n        return (\n            <Div>\n                <span/>\n                <div>\n                    <br/>\n                    <Input value={value} onChange={this.handleChange} />\n                    <Sugest>\n                        <Category>\n                            Category Found:<br/>\n                            {   \n                                result.map(x=>{\n                                    let {name, category} = x;\n                                    return (name && category) &&\n                                    (name.toLowerCase().includes(value.toLocaleLowerCase()) || category.toLowerCase().includes(value.toLocaleLowerCase())) &&\n                                    <Tag onClick={()=>this.handleClickTag(category)}>\n                                        {category}\n                                    </Tag>\n                                })\n\n                            }\n                        </Category>\n                        <TileContent>\n                        {\n                            result.map(x=>{\n                                let {name, image_link, category} = x;\n                                \n                                return (name && category) &&\n                                (name.toLowerCase().includes(value.toLocaleLowerCase()) || category.toLowerCase().includes(value.toLocaleLowerCase())) &&\n                                <Card>\n                                    <Img src={image_link}/>\n                                    {name}\n                                </Card>\n                                }\n                            )\n                        }\n                        </TileContent>\n                    </Sugest>\n                </div>\n                <span/>\n            </Div>\n        )\n    }\n}\n\nexport default IndexPage;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AASA;AAGA;AAqBA;AAIA;AAMA;AAMA;AAOA;AACA;AAYA;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AACA;AAYA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AAAA;AAGA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;;;;;AA/EA;AACA;;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAbA;AACA;AAoFA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}